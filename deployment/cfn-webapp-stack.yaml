AWSTemplateFormatVersion: "2010-09-09"

Description: (WebApp stack) Deploy Amazon API Gateway endpoint, create Amazon S3 Bucket to store web contents, and copy web application artifacts to the Amazon S3 Bucket.

Mappings:
    Solution:
        Project:
            Id: "%SID%"
            LowerCaseId: "%SMALLCAP_SID%"
            Version: "%VERSION%"
        Template:
            S3Bucket: "%BUCKET%"
            KeyPrefix: "%KEYPREFIX%"
            SingleRegion: "%SINGLE_REGION%"
        Package:
            Api: "%PKG_API%"
            WebApp: "%PKG_WEBAPP%"
        Website:
            MainPage: "index.html"
        APIGateway:
            StageName: demo
    Workflow:
        Api:
            Name: "api"
    Node:
        Runtime:
            Version: nodejs14.x

Parameters:
    RootStackId:
        Type: String
        Description: parent stack Id
    CustomResourceLambdaArn:
        Type: String
        Description: for post-processing
    SourceBucket:
        Type: String
        Description: "stores source files"
        AllowedPattern: "[a-z][a-z0-9-_]*"
    LogsBucket:
        Type: String
        Description: "store CloudFront access logs"
        AllowedPattern: "[a-z][a-z0-9-_]*"
    GTLabelingJobStateMachine:
        Type: String
        Description: "Ground Truth State Machine Name"
    GTWorkforceUserPoolId:
        Type: String
        Description: "Ground Truth Workforce User Pool Id"
    GTWorkforceTeamName:
        Type: String
        Description: "Ground Truth Workforce Team Name"
    GTWorkforceTopicArn:
        Type: String
        Description: "Ground Truth Workforce SNS notification topic"
    AnalysisStateMachine:
        Type: String
        Description: "Analysis State Machine Name"
    AwsSdkLayer:
        Type: String
        Description: "aws-sdk layer arn"
    CoreLibLayer:
        Type: String
        Description: core-lib layer arn"
    PriceClass:
        Type: String
        Description: "Specify the price class of the edge location from which CloudFront serves your requests. For more information, see https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PriceClass.html"
        AllowedValues:
            - PriceClass_100
            - PriceClass_200
            - PriceClass_All
        Default: PriceClass_100

Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
            -
                Label:
                    default: "Parent Stack Configuration"
                Parameters:
                    - RootStackId
                    - CustomResourceLambdaArn
                    - SourceBucket
                    - LogsBucket
                    - GTLabelingJobStateMachine
                    - GTWorkforceUserPoolId
                    - GTWorkforceTeamName
                    - GTWorkforceTopicArn
                    - AnalysisStateMachine
                    - AwsSdkLayer
                    - CoreLibLayer
                    - PriceClass
        ParameterLabels:
            RootStackId:
                default: "Stack Id"
            CustomResourceLambdaArn:
                default: "Custom Resource Lambda Arn"
            SourceBucket:
                default: "Source Bucket"
            LogsBucket:
                default: "Logs Bucket"
            GTLabelingJobStateMachine:
                default: "State Machine Name"
            GTWorkforceUserPoolId:
                default: "Team User Pool"
            GTWorkforceTeamName:
                default: "Team Name"
            GTWorkforceTopicArn:
                default: "Team SNS Topic"
            AnalysisStateMachine:
                default: "State Machine Name"
            AwsSdkLayer:
                default: "AWS SDK Lambda Layer"
            CoreLibLayer:
                default: "Core Library Lambda Layer"
            PriceClass:
                default: "Amazon CloudFront Price Class"

Conditions:
    bSingleRegion: !Equals [
        !FindInMap [
            "Solution",
            "Template",
            "SingleRegion"
        ],
        "true"
    ]
    bUSEast1: !Equals [
        !Ref "AWS::Region",
        "us-east-1"
    ]

Resources:
    ################################################################################
    #
    # API Gateway resources
    # * IAM roles
    # * Lambda
    # * API Access Logs
    # * RESTful API endpoint and API Deployment
    #
    ################################################################################
    ApiLambdaLogGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Sub [
                "/aws/lambda/${x0}-${RootStackId}-${x1}", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "LowerCaseId"
                    ],
                    x1: !FindInMap [
                        "Workflow",
                        "Api",
                        "Name"
                    ]
                }
            ]
            RetentionInDays: 30

    ApiRole:
        Type: AWS::IAM::Role
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W11
                        reason: "The wildcard is used here in order to access s3 objects within the bucket."
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: "Allow"
                        Action: "sts:AssumeRole"
                        Principal:
                            Service: "lambda.amazonaws.com"
            Path: /
            Policies:
                -
                    PolicyName: !Sub [
                        "${x0}-${x1}-custom-brand-detection-api", {
                            x0: !FindInMap [
                                "Solution",
                                "Project",
                                "LowerCaseId"
                            ],
                            x1: !Ref RootStackId
                        }
                    ]
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            ## CloudWatch Logs
                            -
                                Effect: "Allow"
                                Action:
                                    - "logs:CreateLogGroup"
                                    - "logs:CreateLogStream"
                                    - "logs:PutLogEvents"
                                Resource: !GetAtt ApiLambdaLogGroup.Arn
                            ## S3
                            -
                                Effect: Allow
                                Action: "s3:ListBucket"
                                Resource: !Sub "arn:aws:s3:::${SourceBucket}"
                            -
                                Effect: Allow
                                Action:
                                    - "s3:GetObject"
                                    - "s3:PutObject"
                                Resource: !Sub "arn:aws:s3:::${SourceBucket}/*"
                            ## Step Functions - start/stop/describe state machine & executions
                            -
                                Effect: "Allow"
                                Action:
                                    - "states:DescribeStateMachine"
                                    - "states:StartExecution"
                                    - "states:ListExecutions"
                                Resource:
                                    - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${GTLabelingJobStateMachine}"
                                    - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AnalysisStateMachine}"
                            -
                                Effect: "Allow"
                                Action:
                                    - "states:DescribeExecution"
                                    - "states:StopExecution"
                                    - "states:GetExecutionHistory"
                                Resource:
                                    - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:${GTLabelingJobStateMachine}:*"
                                    - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:${AnalysisStateMachine}:*"
                            ## SageMaker Ground Truth Private Workforce
                            -
                                Effect: "Allow"
                                Action: "sagemaker:DescribeWorkteam"
                                Resource: !Sub "arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:workteam/${GTWorkforceTeamName}"
                            ## Cognito
                            -
                                Effect: "Allow"
                                Action:
                                    - "cognito-idp:AdminCreateUser"
                                    - "cognito-idp:AdminDeleteUser"
                                    - "cognito-idp:AdminAddUserToGroup"
                                    - "cognito-idp:AdminRemoveUserFromGroup"
                                    - "cognito-idp:ListUsersInGroup"
                                Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${GTWorkforceUserPoolId}"
                            ## SNS
                            -
                                Effect: "Allow"
                                Action:
                                    - "sns:ListSubscriptionsByTopic"
                                    - "sns:Subscribe"
                                Resource: !Ref GTWorkforceTopicArn
                            -
                                Effect: "Allow"
                                Action: "sns:Unsubscribe"
                                Resource: !Join ["", ["*"]]
                            ## Rekognition
                            -
                                Effect: Allow
                                Action: "rekognition:DescribeProjects"
                                Resource: !Join ["", ["*"]]
                            -
                                Effect: "Allow"
                                Action: "rekognition:DescribeProjectVersions"
                                Resource: !Sub "arn:aws:rekognition:${AWS::Region}:${AWS::AccountId}:project/*/*"
                            -
                                Effect: "Allow"
                                Action: "rekognition:StopProjectVersion"
                                Resource: !Sub "arn:aws:rekognition:${AWS::Region}:${AWS::AccountId}:project/*/version/*/*"

    ApiLambda:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub [
                "${x0}-${RootStackId}-${x1}", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "LowerCaseId"
                    ],
                    x1: !FindInMap [
                        "Workflow",
                        "Api",
                        "Name"
                    ],
                }
            ]
            Description: !Sub [
                "(${x0}) Handle POST requests", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "LowerCaseId"
                    ]
                }
            ]
            Runtime: !FindInMap [
                "Node",
                "Runtime",
                "Version"
            ]
            MemorySize: 256
            Timeout: 900
            Handler: index.handler
            Role: !GetAtt ApiRole.Arn
            Code:
                S3Bucket: !Sub [
                    "${x0}${x1}", {
                        x0: !FindInMap [
                            "Solution",
                            "Template",
                            "S3Bucket"
                        ],
                        x1: !If [
                            bSingleRegion,
                            "",
                            !Sub "-${AWS::Region}"
                        ]
                    }
                ]
                S3Key: !Sub [
                    "${x0}/${x1}", {
                        x0: !FindInMap [
                            "Solution",
                            "Template",
                            "KeyPrefix"
                        ],
                        x1: !FindInMap [
                            "Solution",
                            "Package",
                            "Api"
                        ]
                    }
                ]
            Layers:
                - !Ref AwsSdkLayer
                - !Ref CoreLibLayer

    ApiErrorLogRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: Allow
                        Principal:
                            Service: "apigateway.amazonaws.com"
                        Action: "sts:AssumeRole"
            Path: /
            ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"

    ApiAccount:
        Type: AWS::ApiGateway::Account
        Properties:
            CloudWatchRoleArn: !GetAtt ApiErrorLogRole.Arn

    RestApi:
        Type: AWS::ApiGateway::RestApi
        Properties:
            Description: !Sub [
                "(${x0}) RESTful API endpoints to start, stop, describe Step Functions state machine", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "LowerCaseId"
                    ]
                }
            ]
            Body:
                swagger: "2.0"
                info:
                    version: "2018-08-03T20:13:00Z"
                    title: !Sub [
                        "${x0}-custom-brand-detection-api", {
                            x0: !FindInMap [
                                "Solution",
                                "Project",
                                "LowerCaseId"
                            ]
                        }
                    ]
                basePath: !Sub [
                    "/${x0}", {
                        x0: !FindInMap [
                            "Solution",
                            "APIGateway",
                            "StageName"
                        ]
                    }
                ]
                schemes:
                    - "https"
                paths:
                    /{operation}:
                        options:
                            produces:
                                - "application/json"
                            parameters:
                                -
                                    name: "operation"
                                    in: "path"
                                    required: true
                                    type: "string"
                            response:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/Empty"
                                    headers:
                                        Access-Control-Allow-Origin:
                                            type: "string"
                                        Access-Control-Allow-Methods:
                                            type: "string"
                                        Access-Control-Allow-Headers:
                                            type: "string"
                            x-amazon-apigateway-integration:
                                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiLambda.Arn}/invocations"
                                responses:
                                    default:
                                        statusCode: "200"
                                passthroughBehavior: "when_no_match"
                                httpMethod: "POST"
                                contentHandling: "CONVERT_TO_TEXT"
                                type: "aws_proxy"
                        get:
                            produces:
                                - "application/json"
                            parameters:
                                -
                                    name: "operation"
                                    in: "path"
                                    required: true
                                    type: "string"
                            response:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/Empty"
                            security:
                                - sigv4: []
                            x-amazon-apigateway-integration:
                                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiLambda.Arn}/invocations"
                                responses:
                                    default:
                                        statusCode: "200"
                                passthroughBehavior: "when_no_match"
                                httpMethod: "POST"
                                contentHandling: "CONVERT_TO_TEXT"
                                type: "aws_proxy"
                        post:
                            produces:
                                - "application/json"
                            parameters:
                                -
                                    name: "operation"
                                    in: "path"
                                    required: true
                                    type: "string"
                            response:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/Empty"
                            security:
                                - sigv4: []
                            x-amazon-apigateway-integration:
                                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiLambda.Arn}/invocations"
                                responses:
                                    default:
                                        statusCode: "200"
                                passthroughBehavior: "when_no_match"
                                httpMethod: "POST"
                                contentHandling: "CONVERT_TO_TEXT"
                                type: "aws_proxy"
                        delete:
                            produces:
                                - "application/json"
                            parameters:
                                -
                                    name: "operation"
                                    in: "path"
                                    required: true
                                    type: "string"
                            response:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/Empty"
                            security:
                                - sigv4: []
                            x-amazon-apigateway-integration:
                                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiLambda.Arn}/invocations"
                                responses:
                                    default:
                                        statusCode: "200"
                                passthroughBehavior: "when_no_match"
                                httpMethod: "POST"
                                contentHandling: "CONVERT_TO_TEXT"
                                type: "aws_proxy"
                securityDefinitions:
                    sigv4:
                        type: "apiKey"
                        name: "Authorization"
                        in: "header"
                        x-amazon-apigateway-authtype: "awsSigv4"
                definitions:
                    Empty:
                        type: "object"
                        title: "Empty Schema"

    Deployment:
        Type: AWS::ApiGateway::Deployment
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W68
                        reason: "Disable UsagePlan requirement"
        Properties:
            Description: !Sub [
                "(${x0}) created by ${AWS::StackName}", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "LowerCaseId"
                    ]
                }
            ]
            RestApiId: !Ref RestApi
            StageName: !FindInMap [
                "Solution",
                "APIGateway",
                "StageName"
            ]
            StageDescription:
                Description: !Sub [
                    "(${x0}) created by ${AWS::StackName}", {
                        x0: !FindInMap [
                            "Solution",
                            "Project",
                            "LowerCaseId"
                        ]
                    }
                ]
                LoggingLevel: ERROR
                AccessLogSetting:
                    DestinationArn: !Sub [
                        "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/apigateway/access-logs/${x0}/${RestApi}", {
                            x0: !FindInMap [
                                "Solution",
                                "Project",
                                "LowerCaseId"
                            ]
                        }
                    ]
                    Format: "$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] \"$context.httpMethod $context.resourcePath $context.protocol\" $context.status $context.responseLength $context.requestId"
                MethodSettings:
                    -
                        ResourcePath: /~1{operation}
                        HttpMethod: GET
                        DataTraceEnabled: true
                        LoggingLevel: ERROR
                    -
                        ResourcePath: /~1{operation}
                        HttpMethod: POST
                        DataTraceEnabled: true
                        LoggingLevel: ERROR

    OPTIONSOperation:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !GetAtt ApiLambda.Arn
            Principal: apigateway.amazonaws.com
            SourceArn: !Sub [
                "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/${x0}/OPTIONS/*", {
                    x0: !FindInMap [
                        "Solution",
                        "APIGateway",
                        "StageName"
                    ]
                }
            ]

    GETOperation:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !GetAtt ApiLambda.Arn
            Principal: apigateway.amazonaws.com
            SourceArn: !Sub [
                "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/${x0}/GET/*", {
                    x0: !FindInMap [
                        "Solution",
                        "APIGateway",
                        "StageName"
                    ]
                }
            ]

    POSTOperation:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !GetAtt ApiLambda.Arn
            Principal: apigateway.amazonaws.com
            SourceArn: !Sub [
                "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/${x0}/POST/*", {
                    x0: !FindInMap [
                        "Solution",
                        "APIGateway",
                        "StageName"
                    ]
                }
            ]

    DELETEOperation:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !GetAtt ApiLambda.Arn
            Principal: apigateway.amazonaws.com
            SourceArn: !Sub [
                "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/${x0}/DELETE/*", {
                    x0: !FindInMap [
                        "Solution",
                        "APIGateway",
                        "StageName"
                    ]
                }
            ]


    ################################################################################
    #
    # S3 Bucket (Web)
    # * Bucket
    # * OAID
    #
    ################################################################################
    WebBucket:
        Type: AWS::S3::Bucket
        DeletionPolicy: Retain
        UpdateReplacePolicy: Retain
        Properties:
            BucketName: !Sub [
                "${x0}-${x1}-${AWS::AccountId}-${AWS::Region}-web", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "LowerCaseId"
                    ],
                    x1: !Ref RootStackId
                }
            ]
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                    -
                      ServerSideEncryptionByDefault:
                          SSEAlgorithm: AES256
            AccessControl: LogDeliveryWrite
            LoggingConfiguration:
                DestinationBucketName: !Ref LogsBucket
                LogFilePrefix: "access_logs_web_bucket/"
            WebsiteConfiguration:
                IndexDocument: index.html
                ErrorDocument: 404.html
            CorsConfiguration:
                CorsRules:
                    -
                        AllowedMethods:
                            - "GET"
                            - "PUT"
                            - "POST"
                            - "HEAD"
                        AllowedOrigins:
                            - "*"
                        AllowedHeaders:
                            - "*"
                        ExposedHeaders:
                            - "ETag"
                            - "Content-Length"
                        MaxAge: 3000
            LifecycleConfiguration:
                Rules:
                    -
                        Id: "Use Intelligent tier"
                        Status: Enabled
                        Transitions:
                            -
                                StorageClass: INTELLIGENT_TIERING
                                TransitionInDays: 0
                        AbortIncompleteMultipartUpload:
                            DaysAfterInitiation: 7
                    -
                        Id: "Keep previous version for 7 days"
                        Status: Enabled
                        NoncurrentVersionExpirationInDays: 7
                        AbortIncompleteMultipartUpload:
                            DaysAfterInitiation: 1
            Tags:
                -
                    Key: SolutionId
                    Value: !FindInMap [
                        "Solution",
                        "Project",
                        "LowerCaseId"
                    ]
            VersioningConfiguration:
                Status: Enabled

    OriginAccessIdentity:
        Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
        Properties:
            CloudFrontOriginAccessIdentityConfig:
                Comment: !Sub "access-identity-${WebBucket}"

    WebBucketPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
            Bucket: !Ref WebBucket
            PolicyDocument:
                Statement:
                    -
                        Effect: Deny
                        Principal: "*"
                        Action: "*"
                        Resource: !Sub "arn:aws:s3:::${WebBucket}/*"
                        Condition:
                            Bool:
                                "aws:SecureTransport": false
                    -
                        Effect: Allow
                        Action: "s3:GetObject"
                        Resource: !Sub "arn:aws:s3:::${WebBucket}/*"
                        Principal:
                            CanonicalUser: !GetAtt OriginAccessIdentity.S3CanonicalUserId

    ################################################################################
    #
    # Amazon CloudFront distribution
    #
    ################################################################################
    CloudFrontDistribution:
        Type: AWS::CloudFront::Distribution
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W70
                        reason: "Using CloudFront default domain name automatically sets the security policy to TLSv1 regardless of MinimumProtocolVersion"
        Properties:
            DistributionConfig:
                Comment: "Webapp distribution for Amazon Rekognition Custom Brand Detection"
                Origins:
                    -
                        Id: !Sub "S3-${WebBucket}"
                        DomainName: !If [
                            bUSEast1,
                            !Sub "${WebBucket}.s3.amazonaws.com",
                            !Sub "${WebBucket}.s3.${AWS::Region}.amazonaws.com"
                        ]
                        S3OriginConfig:
                            OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${OriginAccessIdentity}"
                DefaultCacheBehavior:
                    TargetOriginId: !Sub "S3-${WebBucket}"
                    AllowedMethods:
                        - OPTIONS
                        - HEAD
                        - GET
                    CachedMethods:
                        - OPTIONS
                        - HEAD
                        - GET
                    ForwardedValues:
                        QueryString: false
                    ViewerProtocolPolicy: redirect-to-https
                DefaultRootObject: index.html
                CustomErrorResponses:
                    -
                        ErrorCode: 403
                        ResponsePagePath: /404.html
                        ResponseCode: 200
                    -
                        ErrorCode: 404
                        ResponsePagePath: /404.html
                        ResponseCode: 200
                IPV6Enabled: true
                ViewerCertificate:
                    CloudFrontDefaultCertificate: true
                Enabled: true
                HttpVersion: http2
                PriceClass: !Ref PriceClass
                Logging:
                    Bucket: !Sub "${LogsBucket}.s3.amazonaws.com"
                    Prefix: access_logs_cloudfront/
                    IncludeCookies: true

    ################################################################################
    #
    # Custom Resources
    #
    ################################################################################
    # Custom::CopyWebContent returns:
    #   * Uploaded
    #   * LastUpdated
    #   * Status
    CopyWebContent:
        Type: Custom::CopyWebContent
        Properties:
            ServiceToken: !Ref CustomResourceLambdaArn
            Data:
                SolutionId: !FindInMap [
                    "Solution",
                    "Project",
                    "LowerCaseId"
                ]
                Source:
                    Bucket: !Sub [
                        "${x0}${x1}", {
                            x0: !FindInMap [
                                "Solution",
                                "Template",
                                "S3Bucket"
                            ],
                            x1: !If [
                                bSingleRegion,
                                "",
                                !Sub "-${AWS::Region}"
                            ]
                        }
                    ]
                    Key: !Sub [
                        "${x0}/${x1}", {
                            x0: !FindInMap [
                                "Solution",
                                "Template",
                                "KeyPrefix"
                            ],
                            x1: !FindInMap [
                                "Solution",
                                "Package",
                                "WebApp"
                            ]
                        }
                    ]
                Destination:
                    Bucket: !Ref WebBucket

    # Custom::PostUpdateWebBucketCORS returns:
    #   * Status
    PostUpdateWebBucketCORS:
        Type: Custom::PostUpdateBucketCORS
        Properties:
            ServiceToken: !Ref CustomResourceLambdaArn
            Data:
                Bucket: !Ref WebBucket
                AllowedOrigins:
                    - !Sub "https://${CloudFrontDistribution.DomainName}"
                AllowedMethods:
                    - HEAD
                    - GET
                    - PUT
                    - POST
                    - DELETE
                AllowedHeaders:
                    - "*"
                ExposeHeaders:
                    - Content-Length
                    - ETag
                MaxAgeSeconds: 3000


    ################################################################################
    #
    # Cognito resources
    # * Authenticated User IAM role, UserPool, IdentityPool, AppClient, register user
    #
    ################################################################################
    CognitoUserPool:
        Type: AWS::Cognito::UserPool
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: F78
                        reason: "Suppress MfaConfiguration error"
        Properties:
            AdminCreateUserConfig:
                AllowAdminCreateUserOnly: true
                InviteMessageTemplate:
                  EmailSubject: "You are invited to Amazon Rekognition Custom Brand Detection demo (GitHub sample code project)"
                  EmailMessage:
                    !Sub
                        - |-
                            <html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schema=s-microsoft-com:office:word" xmlns:m="http://schemas.microsoft.com/office/2004/12/omml" xmlns="http://www.w3.org/TR/REC-html40">
                            <head>
                            <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
                            <meta name="Generator" content="Microsoft Word 15 (filtered medium)">
                            <style>
                                @font-face {
                                font-family: "Cambria Math"; panose-1: 2 4 5 3 5 4 6 3 2 4;
                                }
                                @font-face {
                                font-family: DengXian; panose-1: 2 1 6 0 3 1 1 1 1 1;
                                }
                                @font-face {
                                font-family: Calibri; panose-1: 2 15 5 2 2 2 4 3 2 4;
                                }
                                @font-face {
                                font-family: "@DengXian"; panose-1: 2 1 6 0 3 1 1 1 1 1;
                                }
                                @font-face {
                                font-family: "Amazon Ember"; panose-1: 2 11 6 3 2 2 4 2 2 4;
                                }

                                p.MsoNormal, li.MsoNormal, div.MsoNormal {
                                margin: 0in;
                                margin-bottom: .0001pt;
                                font-size: 12.0pt;
                                font-family: "Calibri", sans-serif;
                                }

                                h2 {
                                mso-style-priority: 9;
                                mso-style-link: "Heading 2 Char";
                                mso-margin-top-alt: auto;
                                margin-right: 0in;
                                mso-margin-bottom-alt: auto;
                                margin-left: 0in;
                                font-size: 18.0pt;
                                font-family: "Calibri", sans-serif;
                                font-weight: bold;
                                }

                                a, span.MsoHyperlink {
                                mso-style-priority: 99;
                                color: #0563C1;
                                }

                                span.EmailStyle17 {
                                mso-style-type: personal-compose;
                                font-family: "Calibri", sans-serif;
                                color: windowtext;
                                }

                                span.Heading2Char {
                                mso-style-name: "Heading 2 Char";
                                mso-style-priority: 9;
                                mso-style-link: "Heading 2";
                                font-family: "Calibri", sans-serif;
                                font-weight: bold;
                                }

                                .MsoChpDefault {
                                mso-style-type: export-only;
                                font-family: "Calibri", sans-serif;
                                }

                                @page WordSection1 {
                                size: 8.5in 11.0in;
                                margin: 1.0in 1.0in 1.0in 1.0in;
                                }

                                div.WordSection1 {
                                page: WordSection1;
                                }

                                .MainContent {
                                font-variant-ligatures: normal;
                                font-variant-caps: normal;
                                orphans:2;
                                text-align:start;
                                widows:2;
                                -webkit-text-stroke-width: 0px;
                                text-decoration-style:initial;
                                text-decoration-color:initial;
                                word-spacing:0px;
                                font-size:13.5pt;
                                }

                                .SubContent {
                                font-family:'Amazon Ember',sans-serif;
                                color:#333333"
                                }
                            </style>
                            </head>

                            <body lang="EN-US" link="#0563C1" vlink="#954F72">
                            <div class="WordSection1">
                                <h2>
                                <span class="SubContent">
                                    Welcome to Amazon Rekognition Custom Brand Detection demo portal (GitHub sample code project)<o:p></o:p>
                                </span>
                                </h2>

                                <p class="MainContent" style="padding-bottom:30px;">
                                <span class="SubContent">
                                    Use the provided user name and temporary password to log in for the first time.<o:p></o:p>
                                </span>
                                </p>

                                <p class="MainContent">
                                <span class="SubContent">
                                    User name: <b>{username}</b><o:p></o:p>
                                </span>
                                </p>

                                <p class="MainContent">
                                <span class="SubContent">
                                    Temporary password: <b>{####}</b><o:p></o:p>
                                </span>
                                <br/>
                                <span class="SubContent" style="font-size:10pt;">
                                    (After you log in with your temporary password, you will be prompted to create a new one.)<o:p></o:p>
                                </span>
                                </p>

                                <p class="MainContent" style="padding-bottom:30px;">
                                <span class="SubContent">
                                    Open the link to log in:<o:p></o:p>
                                    <br/>
                                    <span style="color:#007DBC">
                                        <a href="${url}" target="_blank">${url}</a><o:p></o:p>
                                    </span>
                                </span>
                                </p>

                                <p class="MainContent" style="padding-top: 30pt;">
                                <span class="SubContent" style="font-size:12pt;">
                                    <i>Team AWS Specialist AI/ML</i><o:p></o:p>
                                </span>
                                </p>

                                <p class="MsoNormal">
                                <span style="font-size:11.0pt">
                                    <o:p>&nbsp;</o:p>
                                </span>
                                </p>
                            </div>
                            </body>
                            </html>
                        - {
                            url: !Sub "https://${CloudFrontDistribution.DomainName}",
                        }
            AliasAttributes:
                - email
            AutoVerifiedAttributes:
                - email
            MfaConfiguration: 'OFF'
            Policies:
                PasswordPolicy:
                    MinimumLength: 8
                    RequireLowercase: true
                    RequireNumbers: true
                    RequireSymbols: false
                    RequireUppercase: true
            UserPoolName: !Sub [
                "${x0}-${x1}-webapp-userpool", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "LowerCaseId"
                    ],
                    x1: !Ref RootStackId
                }
            ]

    CognitoAppClient:
        Type: AWS::Cognito::UserPoolClient
        Properties:
            ClientName: !Sub [
                "${x0}-${x1}-webapp-appclient", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "LowerCaseId"
                    ],
                    x1: !Ref RootStackId
                }
            ]
            RefreshTokenValidity: 30
            UserPoolId: !Ref CognitoUserPool

    CognitoIdentityPool:
        Type: AWS::Cognito::IdentityPool
        Properties:
            IdentityPoolName: !Sub [
                "${x0}_${x1}_webapp_identity_pool", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "LowerCaseId"
                    ],
                    x1: !Ref RootStackId
                }
            ]
            AllowUnauthenticatedIdentities: false
            CognitoIdentityProviders:
                -
                  ClientId: !Ref CognitoAppClient
                  ProviderName: !GetAtt CognitoUserPool.ProviderName
                  ServerSideTokenCheck: false

    CognitoAuthenticatedUserRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: "Allow"
                        Principal:
                            Federated: "cognito-identity.amazonaws.com"
                        Action: "sts:AssumeRoleWithWebIdentity"
                        Condition:
                            StringEquals:
                                cognito-identity.amazonaws.com:aud: !Ref CognitoIdentityPool
                            ForAnyValue:StringLike:
                                cognito-identity.amazonaws.com:amr: "authenticated"
            Path: /
            Policies:
                -
                    PolicyName: !Sub [
                        "${x0}-webapp-auth-user", {
                            x0: !FindInMap [
                                "Solution",
                                "Project",
                                "LowerCaseId"
                            ]
                        }
                    ]
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            ## Cognito
                            -
                                Effect: "Allow"
                                Action: "cognito-identity:GetId"
                                Resource: !Sub "arn:aws:cognito-identity:${AWS::Region}:${AWS::AccountId}:identitypool/${CognitoIdentityPool}"
                            ## API Gateway
                            -
                                Effect: "Allow"
                                Action: "execute-api:Invoke"
                                Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*"
                            ## S3
                            -
                                Effect: "Allow"
                                Action:
                                    - "s3:GetObject"
                                    - "s3:PutObject"
                                    - "s3:ListBucket"
                                Resource:
                                    - !Sub "arn:aws:s3:::${SourceBucket}"
                                    - !Sub "arn:aws:s3:::${SourceBucket}/*"

    CognitoIdentityPoolRoleAttachment:
        Type: AWS::Cognito::IdentityPoolRoleAttachment
        Properties:
            IdentityPoolId: !Ref CognitoIdentityPool
            Roles:
                authenticated: !GetAtt CognitoAuthenticatedUserRole.Arn

Outputs:
    WebBucket:
        Value: !Ref WebBucket
        Description: Bucket Name (Web)
    CloudFrontDistributionId:
        Value: !Ref CloudFrontDistribution
        Description: "CloudFront Distribution Id"
    WebsiteUrl:
        Value: !Sub https://${CloudFrontDistribution.DomainName}
        Description: "Website URL"
    LastUpdated:
        Value: !GetAtt CopyWebContent.LastUpdated
        Description: "Last Updated"
    ## API Gateway
    ApiLambdaArn:
        Value: !GetAtt ApiLambda.Arn
        Description: Lambda Arn (POST request)
    ApiRoleArn:
        Value: !GetAtt ApiRole.Arn
        Description: IAM Role Arn (API Lambda)
    RestApiId:
        Value: !Ref RestApi
        Description: API Id
    RestApiEndpoint:
        Value: !Sub [
            "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${x0}", {
                x0: !FindInMap [
                    "Solution",
                    "APIGateway",
                    "StageName"
                ]
            }
        ]
        Description: API Endpoint
    ## Cognito resources
    CognitoUserPoolId:
        Value: !Ref CognitoUserPool
        Description: "User Pool ID (Cognito)"
    CognitoUserPoolArn:
        Value: !GetAtt CognitoUserPool.Arn
        Description: "User Pool Arn (Cognito)"
    CognitoUserPoolProviderName:
        Value: !GetAtt CognitoUserPool.ProviderName
        Description: "User Pool Provider Name (Cognito)"
    CognitoUserPoolProviderURL:
        Value: !GetAtt CognitoUserPool.ProviderURL
        Description: "User Pool Provider Url (Cognito)"
    CognitoAppClientId:
        Value: !Ref CognitoAppClient
        Description: "App Client ID (Cognito)"
    CognitoIdentityPoolId:
        Value: !Ref CognitoIdentityPool
        Description: "Identity Pool (Cognito)"
    CognitoIdentityPoolName:
        Value: !GetAtt CognitoIdentityPool.Name
        Description: "Identity Pool Name (Cognito)"
